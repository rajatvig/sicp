#lang racket

(define (qsort l)
  (if (null? l)
      '()
      (let ((p (car l))
            (rest (cdr l)))
        (append
         (qsort (filter (lambda (x) (<= x p)) rest))
         (list p)
         (qsort (filter (lambda (x) (> x p)) rest))))))

(define (mergesort l)
  (define (split l)
    (define (odd l)
      (if (null? l)
          '()
          (if (null? (cdr l))
              (list (car l))
              (cons (car l) (odd (cdr (cdr l)))))))
    (define (even l)
      (if (null? l)
          '()
          (if (null? (cdr l))
              '()
              (cons (car (cdr l)) (even (cdr (cdr l)))))))
    (cons (odd l) (list (even l))))
  (define (mergelists l1 l2)
    (cond ((and (null? first) (null? second)) '())
          ((null? l1) l2)
          ((null? l2) l1)
          ((< (car l1) (car l2)) (cons (car l1) (mergelists (cdr l1) l2)))
          (else (cons (car l2) (mergelists l1 (cdr l2))))))
  (cond ((null? l) '())
        ((= (length l) 1) l)
        ((= (length l) 2) (mergelists (list (car l)) (cdr l)))
        (else (let ((s (split l)))
                (mergelists (mergesort (car s))
                            (mergesort (car (cdr s))))))))
